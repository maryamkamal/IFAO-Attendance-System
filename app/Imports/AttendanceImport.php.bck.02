<?php

namespace App\Imports;

use Exception;
use App\Attendance;
use App\Employee;
use App\Absence;
use App\vacation;
use App\WorkScheduleProfile;
use App\OverTimeProfile;
use App\EmployeeLeave;
use App\AttendanceNet;
use Illuminate\Support\Collection;
use Maatwebsite\Excel\Concerns\ToCollection;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Illuminate\Support\Facades\Validator;
use DB;
class AttendanceImport implements ToCollection, WithHeadingRow
{
    /**
    * @param array $row
    *
    * @return \Illuminate\Database\Eloquent\Model|null
    */
     public function collection(Collection $rows)
    {
		
        date_default_timezone_set("Africa/Cairo");
        Validator::make($rows->toArray(), [
             '*.employee_code' => 'required',
         ])->validate();

		foreach ($rows as $row){	
		
		$employee = Employee::where('code',$row["employee_code"])->first();
		
		$employee_id =$employee->id;
		if($row["work_schedule_id"]){
		$work_schedule_id = $row["work_schedule_id"];
		}else{
			$work_schedule_id = $employee->work_schedule_id;
		}
		if($row["overtime_profile_id"]){
		$overtime_profile_id = $row["overtime_profile_id"];
		}else{
			$overtime_profile_id = $employee->overtime_profile_id;
		}
		if((bool)strtotime($row["day"]) == false){
		$day =\PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($row["day"])->format('Y-m-d');
		}
		else{
			$day =$row["day"];
		}
		
		$from =\PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($row["from"])->format('H:i:s');
		
		$to =\PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($row["to"])->format('H:i:s');
		// check employees absence
		if($row["from"] ==null && $row["to"] ==null){
			$today = date('l', strtotime($day));
			 $vacation = vacation::whereDate('from', '<=',$day)
            ->whereDate('to', '>=', $day)->first();
			$work_schedule_profile = WorkScheduleProfile::where('id',$employee->work_schedule_id)->first();
				$absence_check = Absence::where('employee_id',$employee->id)
				                          ->where('day',$day)
										   ->first();
				$EmployeeLeave=EmployeeLeave::where('employee_id',$employee->id)
				             ->whereDate('from', '<=',$day)
                             ->whereDate('to', '>=', $day)
							 ->where('status','approved')
							 ->first();
				if($vacation == null){
				if(in_array($today,unserialize($work_schedule_profile->work_days))){
				 $delay_time= floor((strtotime(date("H:i:s"))- strtotime($work_schedule_profile->start))/60);
					 if($absence_check == null){
					$Absence = new Absence;
					$Absence->employee_id = $employee->id;
				   $Absence->day = $day;
				  if($EmployeeLeave){
				  $leave_id = $EmployeeLeave->leave_id;
				  $Absence->leave_id = $EmployeeLeave->leave_id;
				  }
				  $Absence->save();
				  $employee->solde =  $employee->solde-8 ;
		          $employee->save();
		}
				}
				}
		}
		elseif(isset($row["id"]) && $row["id"] !=null){
			 $attendance = Attendance::find($row["id"]); 
             Attendance::store( $attendance,$employee_id,$day,$from,$to,$work_schedule_id,$overtime_profile_id);
		}
		else{
		 $attendance = new Attendance;
		 Attendance::store( $attendance,$employee_id,$day,$from,$to,$work_schedule_id,$overtime_profile_id);
		}
		
		
		}
	}
}
